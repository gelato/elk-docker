---

  - name: rabbitmq_ha_config | checking if rabbitmqadmin is installed
    stat:
      path: /usr/sbin/rabbitmqadmin
    register: rabbitmqadmin_check

  - name: rabbitmq_ha_config | install rabbitMQ admin
    get_url:
      url: "http://guest:guest@localhost:15672/cli/rabbitmqadmin"
      dest: "/usr/sbin"
    when: not rabbitmqadmin_check.stat.exists

  - name: rabbitmq_ha_config | making executable rabbitMQ Admin
    file:
      path: "/usr/sbin/rabbitmqadmin"
      owner: root
      group: root
      mode: 0755
    notify: restart rabbitmq-server
    when: not rabbitmqadmin_check.stat.exists

  - name: rabbitmq_ha_config | creating queue(s)
    rabbitmq_queue:
      name: "{{ item.queue_name }}"
      durable: "{{ item.durable|lower }}"
      vhost: "{{ item.vhost }}"
      state: present
      login_host: localhost
      login_user: "{{ item.user }}"
      login_password: "{{ item.password }}"
      message_ttl: "{{ central_queue_message_ttl }}"
    with_items: "{{ rabbitmq_config }}"
    when: inventory_hostname == "{{ rabbitmq_master }}"
    notify: restart rabbitmq-server
    ignore_errors: true

  - name: rabbitmq_ha_config | setting up ha on queue(s)
    rabbitmq_policy:
      name: "ha-all"
      pattern: '.*'
      tags: "{{ item.tags }}"
      state: present
      vhost: "{{ item.vhost }}"
      apply_to: all
    with_items: "{{ rabbitmq_config }}"
    when: inventory_hostname == "{{ rabbitmq_master }}"
    notify: restart rabbitmq-server
    ignore_errors: true

  - name: rabbitmq_ha_config | creating exchange(s)
    rabbitmq_exchange:
      name: "{{ item.exchange_name }}"
      exchange_type: "{{ item.type }}"
      vhost: "{{ item.vhost }}"
      state: present
      durable: true
      login_host: localhost
      login_user: "{{ item.user }}"
      login_password: "{{ item.password }}"
    with_items: "{{ rabbitmq_config }}"
    when: inventory_hostname == "{{ rabbitmq_master }}"
    notify: restart rabbitmq-server
    ignore_errors: true

  - name: rabbitmq_ha_config | creating binding(s)
    rabbitmq_binding:
      name: "{{ item.exchange_name }}"
      destination: "{{ item.queue_name }}"
      routing_key: "{{ item.routing_key }}"
      destination_type: queue
      vhost: "{{ item.vhost }}"
      state: present
      login_host: localhost
      login_user: "{{ item.user }}"
      login_password: "{{ item.password }}"
    ignore_errors: true
    with_items: "{{ rabbitmq_config }}"
    when: inventory_hostname == "{{ rabbitmq_master }}"
    notify: restart rabbitmq-server
    # notify: delete guest
