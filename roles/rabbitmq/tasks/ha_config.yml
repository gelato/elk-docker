---

  - name: RabbitMQ HA | Creating queue(s)
    rabbitmq_queue:
      name: "{{ item.queue_name }}"
      login_user: "{{ item.user }}"
      login_password: "{{ item.password }}"
      login_host: localhost
      login_port: "{{ rabbitmq_talking_port }}"
      auto_delete: no
      durable: "{{ item.durable|lower }}"
      message_ttl: 20000
      state: present
      vhost: "{{ item.vhost }}"
    with_items: "{{ rabbitmq_config }}"
    when: not clustered.stat.exists and (inventory_hostname == "{{ rabbitmq_master }}")
    ignore_errors: true

  - name: RabbitMQ HA | Setting up HA on queue(s)
    uri:
      url: "http://localhost:{{ rabbitmq_talking_port }}/api/policies/{{ item.vhost }}/ha-all"
      headers:
        content-type: application/json
      method: PUT
      force_basic_auth: yes
      user: guest
      password: guest
      status_code: 204
      body_format: json
      body: '{"pattern":".*", "definition":{"ha-mode":"all"}, "apply-to":"all"}'
    with_items: "{{ rabbitmq_config }}"
    when: not clustered.stat.exists and (inventory_hostname == "{{ rabbitmq_master }}")
    ignore_errors: true

  - name: RabbitMQ HA | Create exchange(s)
    rabbitmq_exchange:
      name: "{{ item.exchange_name }}"
      auto_delete: no
      durable: "{{ item.durable }}"
      exchange_type: "{{ item.type }}"
      login_host: localhost
      login_port: "{{ rabbitmq_talking_port }}"
      login_user: "{{ item.user }}"
      login_password: "{{ item.password }}"
      vhost: "{{ item.vhost }}"
      state: present
    with_items: "{{ rabbitmq_config }}"
    when: not clustered.stat.exists and (inventory_hostname == "{{ rabbitmq_master }}")
    ignore_errors: true

  - name: RabbitMQ HA | Create binding(s)
    rabbitmq_binding:
      name: "{{ item.exchange_name }}"
      destination: "{{ item.queue_name }}"
      destination_type: queue
      login_host: localhost
      login_port: "{{ rabbitmq_talking_port }}"
      login_user: "{{ item.user }}"
      login_password: "{{ item.password }}"
      routing_key: "{{ item.routing_key }}"
      vhost: "{{ item.vhost }}"
      state: present
    with_items: "{{ rabbitmq_config }}"
    when: not clustered.stat.exists and (inventory_hostname == "{{ rabbitmq_master }}")
    ignore_errors: true
