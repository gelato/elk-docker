---

  

  - name: rabbitmq_clustering | resetting rabbitmq app
    command: rabbitmqctl reset

  - name: rabbitmq_clustering | stopping rabbitmq-server
    service:
      name: rabbitmq-server
      state: stopped

  #- name: grabbing erlang cookie
  #  shell: cat /var/lib/rabbitmq/.erlang.cookie
  #  register: erlang_cookie
  #  when: inventory_hostname == "{{ rabbitmq_master }}"

  # - name: rabbitmq_clustering | copy erlang cookie
  #   template:
  #     src: "{{ rabbitmq_config_templates }}/erlang.cookie.j2"
  #     dest: "{{ erlang_cookie_file }}"
  #     owner: rabbitmq
  #     group: rabbitmq
  #     mode: 0400
  #     backup: yes
  #  when: inventory_hostname != "{{ rabbitmq_master }}"

  - name: rabbitmq_clustering | restarting rabbitmq-server on master
    service:
      name: rabbitmq-server
      state: restarted
    when: inventory_hostname == "{{ rabbitmq_master }}"

  - name: rabbitmq_clustering | starting rabbitmq app on master
    command: rabbitmqctl start_app
    register: cluster_master
    when: inventory_hostname == "{{ rabbitmq_master }}"

  # - name: rabbitmq_clustering | sending sigterm to any running rabbitmq processes
  #   shell: pkill -u rabbitmq || true
  #   when: inventory_hostname != "{{ rabbitmq_master }}"

  - name: rabbitmq_clustering | restarting rabbitmq-server on slaves
    service:
      name: rabbitmq-server
      state: restarted
    when: inventory_hostname != "{{ rabbitmq_master }}"

  - name: rabbitmq_clustering | stopping rabbitmq app on slaves
    command: rabbitmqctl stop_app
    when: inventory_hostname != "{{ rabbitmq_master }}"

  - name: rabbitmq_clustering | resetting rabbitmq app on slaves
    command: rabbitmqctl reset
    when: inventory_hostname != "{{ rabbitmq_master }}"

  - name: rabbitmq_clustering | joining rabbitmq cluster on slaves
    command: rabbitmqctl join_cluster 'rabbit@{{ rabbitmq_master }}'
    register: cluster_joined
    when: inventory_hostname != "{{ rabbitmq_master }}"

  - name: rabbitmq_clustering | starting rabbitmq app on slaves
    command: rabbitmqctl start_app
    when: inventory_hostname != "{{ rabbitmq_master }}"

  - name: rabbitmq_clustering | marking as clustered
    file:
      path: /etc/rabbitmq/clustered
      state: touch
    when: clustered.stat.exists != True
