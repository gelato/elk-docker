# input {
#     file {
#         type => "linux-syslog"
#         path => ["/var/log/syslog"]
#     }
# }

input {
    rabbitmq {
      host => "{{ rabbitmq_endpoint }}"
      subscription_retry_interval_seconds => 5
      ack => "true"
      arguments => "{"x-ha-policy" => "all"}"
      auto_delete => "false"
      automatic_recovery => "true"
      codec => "json"
      connect_retry_interval => 1
      connection_timeout => 1000
      durable => "true"
      exchange => "logstash_reciever"
      heartbeat => 1
      key => "{{ logstash_rabbitmq_routing_key }}"
      metadata_enabled => "{{ logstash_rabbitmq_send_metadata }}"
      user => "{{ logstash_rabbitmq_output_user }}"
      password => "{{ logstash_rabbitmq_output_password }}"
      queue => "logstash-syslog"
    }
}

filter {
  if [type] == "linux-syslog" {
    grok {
      match => { "message" => "^%{SYSLOGTIMESTAMP:syslog_timestamp}\s*%{SYSLOGHOST:syslog_hostname}\s*(%{PROG:syslog_program})?\s*(:?\[%{POSINT:syslog_pid}\])?:?\s*%{GREEDYDATA:syslog_message}[a-z]*\s*$" }
      add_tag => "syslog_everything"
      keep_empty_captures => "true"
      tag_on_failure => "logstash_syslog_parsefailure"
      overwrite => [ "message" ]
    }
    date {
      match => [ "syslog_timestamp", "MMM  d HH:mm:ss", "MMM dd HH:mm:ss" ]
    }
  }
}
